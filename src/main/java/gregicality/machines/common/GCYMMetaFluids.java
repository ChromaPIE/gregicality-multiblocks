package gregicality.machines.common;

import gregicality.machines.GregicalityMultiblocks;
import gregicality.machines.api.unification.properties.AlloyBlastProperty;
import gregicality.machines.api.unification.properties.GCYMPropertyKey;
import gregtech.api.GregTechAPI;
import gregtech.api.unification.material.Material;
import gregtech.api.unification.material.properties.BlastProperty;
import gregtech.api.unification.material.properties.FluidProperty;
import gregtech.api.unification.material.properties.PropertyKey;
import gregtech.api.unification.ore.OrePrefix;
import gregtech.api.util.FluidTooltipUtil;
import gregtech.api.util.GTUtility;
import gregtech.common.MetaFluids;
import net.minecraft.client.renderer.texture.TextureMap;
import net.minecraft.util.ResourceLocation;
import net.minecraftforge.fluids.Fluid;
import net.minecraftforge.fluids.FluidRegistry;

import javax.annotation.Nonnull;
import java.util.HashSet;
import java.util.Set;

public class GCYMMetaFluids {

    private static final Set<ResourceLocation> fluidSprites = new HashSet<>();

    private static final String MOLTEN_PREFIX = "fluid.molten";

    public static final ResourceLocation AUTO_GENERATED_MOLTEN_TEXTURE = new ResourceLocation(
            GregicalityMultiblocks.MODID, "blocks/fluids/fluid.molten.autogenerated");

    public static void init() {
        addFluidSprites();

        for (Material material : GregTechAPI.MATERIAL_REGISTRY) {
            createMoltenFluid(material);
        }
    }

    public static void addFluidSprites() {
        fluidSprites.add(AUTO_GENERATED_MOLTEN_TEXTURE);
    }

    public static void createMoltenFluid(@Nonnull Material material) {
        if (!OrePrefix.ingotHot.doGenerateItem(material)) return;

        // ignore materials which are not alloys
        if (material.getMaterialComponents().size() <= 1) return;

        FluidProperty fluidProperty = material.getProperty(PropertyKey.FLUID);
        if (fluidProperty == null) return;

        BlastProperty blastProperty = material.getProperty(PropertyKey.BLAST);
        if (blastProperty == null) return;

        AlloyBlastProperty alloyBlastProperty = material.getProperty(GCYMPropertyKey.ALLOY_BLAST);
        if (alloyBlastProperty == null) return;

        int temperature = fluidProperty.getFluidTemperature();
        Fluid fluid = registerMoltenFluid(material, temperature);
        alloyBlastProperty.setFluid(fluid);
        alloyBlastProperty.setTemperature(blastProperty.getBlastTemperature() + 900);
        FluidTooltipUtil.registerTooltip(fluid, material.getChemicalFormula());
    }

    @Nonnull
    public static Fluid registerMoltenFluid(@Nonnull Material material, int temperature) {
        String fluidName = "molten." + material.toString();
        Fluid fluid = FluidRegistry.getFluid(fluidName);

        // if the material is still not registered by this point, register it
        if (fluid == null) {
            fluid = new MetaFluids.MaterialFluid(fluidName, material, MOLTEN_PREFIX, AUTO_GENERATED_MOLTEN_TEXTURE);
            fluid.setTemperature(temperature);
            if (material.hasFluidColor())
                fluid.setColor(GTUtility.convertRGBtoOpaqueRGBA_MC(material.getMaterialRGB()));
            else
                fluid.setColor(0xFFFFFFFF);

            // set properties and register
            MetaFluids.setStateProperties(fluid, MetaFluids.FluidState.LIQUID);
            FluidRegistry.registerFluid(fluid);
        }

        // add buckets for each fluid
        FluidRegistry.addBucketForFluid(fluid);
        return fluid;
    }

    public static void registerSprites(TextureMap textureMap) {
        for (ResourceLocation spriteLocation : fluidSprites) {
            textureMap.registerSprite(spriteLocation);
        }
    }
}
